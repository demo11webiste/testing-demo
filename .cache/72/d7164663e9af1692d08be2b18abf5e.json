{"id":"js/curlsShader/fragment.glsl","dependencies":[{"name":"C:\\Users\\Ahmed\\Downloads\\lusion\\package.json","includedInParent":true,"mtime":1658116214000}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float uTime;\\n\\nvarying vec2 vUv;\\nuniform vec3 uLight;\\nvarying vec3 vPosition;\\nvarying vec3 v_worldPosition;\\nvarying vec3 vNormal;\\nconst float PI = 3.141592653589793238;\\n\\nfloat getScatter(vec3 camera, vec3 dir, vec3 light, float d) {\\n  // light to ray origin\\n  vec3 q = camera - light;\\n\\n  // coefficient\\n  float b = dot(dir, q);\\n  float c = dot(q, q);\\n\\n  // evaluate integral\\n  float t = c - b * b;\\n  float s = 1. / sqrt(max(.0001, t));\\n  float l = s * (atan((d + b) * s) - atan(b * s));\\n\\n  return pow(max(0., l / 15.) , .4);\\n}\\n\\nvoid main() {\\n\\n   float dash = sin(vUv.x * 50. + uTime);\\n\\n   if (dash < .3) {\\n     discard;\\n   }\\n \\n  vec3 cameraToWorld = v_worldPosition - cameraPosition;\\n  vec3 cameraToWorldDir = normalize(cameraToWorld);\\n  float cameraToWorldDist = length(cameraToWorld);\\n\\n  vec3 lightToWorldDir = normalize(uLight - v_worldPosition);\\n  float diffusion = max(0.,dot(vNormal, lightToWorldDir));\\n  float dist = length(uLight - vPosition);\\n\\n  float scatter = getScatter(cameraPosition, cameraToWorldDir, uLight, cameraToWorldDist);\\n\\n  gl_FragColor = vec4(1. - dist, 0., 0., 1.);\\n  gl_FragColor = vec4(scatter, 0., 0., 1.);\\n\\n}\";"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"js/curlsShader/fragment.glsl","original":{"line":1,"column":0},"name":"module"},{"generated":{"line":1,"column":6},"source":"js/curlsShader/fragment.glsl","original":{"line":1,"column":6}},{"generated":{"line":1,"column":7},"source":"js/curlsShader/fragment.glsl","original":{"line":1,"column":7},"name":"exports"},{"generated":{"line":1,"column":14},"source":"js/curlsShader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/curlsShader/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1228},"source":"js/curlsShader/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"js/curlsShader/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float uTime;\\n\\nvarying vec2 vUv;\\nuniform vec3 uLight;\\nvarying vec3 vPosition;\\nvarying vec3 v_worldPosition;\\nvarying vec3 vNormal;\\nconst float PI = 3.141592653589793238;\\n\\nfloat getScatter(vec3 camera, vec3 dir, vec3 light, float d) {\\n  // light to ray origin\\n  vec3 q = camera - light;\\n\\n  // coefficient\\n  float b = dot(dir, q);\\n  float c = dot(q, q);\\n\\n  // evaluate integral\\n  float t = c - b * b;\\n  float s = 1. / sqrt(max(.0001, t));\\n  float l = s * (atan((d + b) * s) - atan(b * s));\\n\\n  return pow(max(0., l / 15.) , .4);\\n}\\n\\nvoid main() {\\n\\n   float dash = sin(vUv.x * 50. + uTime);\\n\\n   if (dash < .3) {\\n     discard;\\n   }\\n \\n  vec3 cameraToWorld = v_worldPosition - cameraPosition;\\n  vec3 cameraToWorldDir = normalize(cameraToWorld);\\n  float cameraToWorldDist = length(cameraToWorld);\\n\\n  vec3 lightToWorldDir = normalize(uLight - v_worldPosition);\\n  float diffusion = max(0.,dot(vNormal, lightToWorldDir));\\n  float dist = length(uLight - vPosition);\\n\\n  float scatter = getScatter(cameraPosition, cameraToWorldDir, uLight, cameraToWorldDist);\\n\\n  gl_FragColor = vec4(1. - dist, 0., 0., 1.);\\n  gl_FragColor = vec4(scatter, 0., 0., 1.);\\n\\n}\";"},"lineCount":null}},"error":null,"hash":"628b0d1cc5b2b3fb7d1c088c81d32e25","cacheData":{"env":{}}}